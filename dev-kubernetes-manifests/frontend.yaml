apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: frontend-rollout
  annotations:
    circleci.com/scale-version-enabled: "true"
    circleci.com/restart-version-enabled: "true"
    circleci.com/restore-version-enabled: "true"
spec:
  replicas: 1
  progressDeadlineSeconds: 90
  rollbackWindow:
    revisions: 3
  selector:
    matchLabels:
      app: frontend #martches deployment notrollout name
  strategy:
    canary:
      canaryService: frontend-canary  # required
      stableService: frontend  # required
      trafficRouting:
        managedRoutes:
          - name: frontend-header-route-1
        istio:
          virtualService:
            name: frontend-virtual-service  # required
            #routes:
            #- primary            # optional if there is a single route in VirtualService, required otherwise
      steps:
      - setHeaderRoute:
          # Name of the route that will be created by argo rollouts this must also be configured
          # in spec.strategy.canary.trafficRouting.managedRoutes
          name: "frontend-header-route-1"
          # The matching rules for the header route, if this is missing it acts as a removal of the route.
          match:
              # headerName The name of the header to apply the match rules to.
            - headerName: "x-demo-version"
              # headerValue must contain exactly one field of exact, regex, or prefix. Not all traffic routers support 
              # all types
              headerValue:
                # Exact will only match if the header value is exactly the same
                exact: "canary"
      - setWeight: 50
      - pause:
          duration: 20s
      - setWeight: 100
  template:
    metadata:
      labels:
        app: frontend
    spec:
      serviceAccountName: default
      terminationGracePeriodSeconds: 5
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
      - name: frontend
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - all
          privileged: false
          readOnlyRootFilesystem: true
        image: cera-frontend
        volumeMounts:
        - name: publickey
          mountPath: "/tmp/.ssh"
          readOnly: true
        - mountPath: /tmp
          name: tmp
        - name: podinfo
          mountPath: /etc/podinfo
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: OTEL_PROPAGATORS
          value: tracecontext,baggage,b3
        - name: OTEL_TRACES_EXPORTER
          value: otlp
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: 'http://jaeger-collector:4317'
        - name: VERSION
          value: "dev"
        - name: PORT
          value: "8080"
        - name: ENABLE_TRACING
          value: "false"
        - name: ENABLE_METRICS
          value: "false"
        - name: SCHEME
          value: "https"
         # Valid levels are debug, info, warning, error, critical. If no valid level is set, gunicorn will default to info.
        - name: LOG_LEVEL
          value: "info"
        # Set to "true" to enable the CymbalBank logo + title
        - name: CIRCLECI_LOGO
          value: "true"
        # Customize the bank name used in the header. Defaults to 'CCI Bank Corp' - when CIRCLECI_LOGO is true, uses 'CymbalBank'
        - name: BANK_NAME
          value: "CCI Bank Corp"
        # Customize the cluster name if it cannot be retrieved from the metadata server
        #- name: CLUSTER_NAME
        #  value: "my-cluster"
        - name: DEFAULT_USERNAME
          valueFrom:
            configMapKeyRef:
              name: demo-data-config
              key: DEMO_LOGIN_USERNAME
        - name: DEFAULT_PASSWORD
          valueFrom:
            configMapKeyRef:
              name: demo-data-config
              key: DEMO_LOGIN_PASSWORD
        # Customize the metadata server hostname to query for metadata
        #- name: METADATA_SERVER
        #  value: "my-metadata-server"
        # Customize the pod zone if it cannot be retrieved from the metadata server
        #- name: POD_ZONE
        #  value: "my-zone"
        envFrom:
        - configMapRef:
            name: environment-config
        - configMapRef:
            name: service-api-config
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 10
        livenessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 15
          timeoutSeconds: 30
        resources:
          requests:
            cpu: 100m
            memory: 96Mi
          limits:
            cpu: 250m
            memory: 160Mi
      volumes:
      - name: publickey
        secret:
          secretName: jwt-key
          items:
          - key: jwtRS256.key.pub
            path: publickey
      - emptyDir: {}
        name: tmp
      - name: podinfo
        downwardAPI:
          items:
            - path: "labels"
              fieldRef:
                fieldPath: metadata.labels
# [END gke_dev_kubernetes_manifests_frontend_deployment_frontend]
---
# [START gke_dev_kubernetes_manifests_frontend_service_frontend]
apiVersion: v1
kind: Service
metadata:
  name: frontend
spec:
  type: ClusterIP
  selector:
    app: frontend
  ports:
  - name: http
    port: 80
    targetPort: 8080
# [END gke_dev_kubernetes_manifests_frontend_service_frontend]
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-canary
spec:
  type: ClusterIP
  selector:
    app: frontend
  ports:
  - name: http
    port: 80
    targetPort: 8080
---
kind: VirtualService
apiVersion: networking.istio.io/v1alpha3
metadata:
  name: frontend-virtual-service
spec:
  hosts:
    - "this gets replaced by Kustomize"
  gateways:
    - this-gets-replaces-by-kustomize
  http:
    - route:
      - weight: 100
        destination:
          host: frontend
          port:
            number: 80
      - weight: 0
        destination:
          host: frontend-canary
          port:
            number: 80