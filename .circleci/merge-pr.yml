version: 2.1
orbs:
  maven: circleci/maven@1.4
          
executors:
  jdk17:
    docker:
      - image: cimg/openjdk:17.0.3
    resource_class: xlarge

  python38:
    docker:
      - image: cimg/python:3.8


jobs:
  python-checkstyle:
    executor: python38
    steps:
      - checkout
      - run: pip install pylint
      - run:
          name: Lint Python
          command: pylint --rcfile=./.pylintrc ./src/*/*.py

  python-test:
    executor: python38
    steps:
      - checkout
      - run: mkdir test-reports
      - run:
          name: Test Python Services
          command: |
            for SERVICE in "contacts" "userservice"; do
              echo "testing $SERVICE..."
              # save current working dir to memory and cd to src/$SERVICE
              pushd src/$SERVICE
                python3 -m venv $HOME/venv-$SERVICE
                source $HOME/venv-$SERVICE/bin/activate
                pip install --upgrade pip
                pip install -r requirements.txt
                #CLI wraps test runner to allow "rerun failed tests only"
                TEST_FILES=$(circleci tests glob "tests/test_*.py")
                echo $TEST_FILES | circleci tests run --command="xargs python -m pytest -o junit_family=legacy --junit-xml=../../test-reports/report-${SERVICE}.xml -v -p no:warnings" --verbose --split-by=timings
                deactivate
              # return to previously saved path
              popd
            done
      - store_test_results:
          path: test-reports
      - store_artifacts:
          path: test-reports

  python-test-parallel:
    executor: python38
    parallelism: 2 #match number of python services
    steps:
      - checkout
      - run: mkdir test-reports
      - run:
          name: Test Python Services
          command: |
            MODULES=("contacts" "userservice")
            MY_MODULES=`printf '%s\n' "${MODULES[@]}" | circleci tests split`
            echo "Running modules ${MY_MODULES[@]}"
            for MOD in "${MY_MODULES[@]}"; do
                pushd src/$MOD >/dev/null
                python3 -m venv $HOME/venv-$MOD
                source $HOME/venv-$MOD/bin/activate
                pip install --upgrade pip
                pip install -r requirements.txt
                #CLI wraps test runner to allow "rerun failed tests only"
                python -m pytest tests --junit-xml=../../test-reports/report-${MOD}.xml -v -p no:warnings
                deactivate
                # return to previously saved path
                popd >/dev/null
            done
      - store_test_results:
          path: test-reports
      - store_artifacts:
          path: test-reports

  java-checkstyle:
    executor: jdk17
    steps:
      - checkout
      - maven/with_cache:  
          verify_dependencies: false       
          steps: 
          - run: ./mvnw checkstyle:check


  java-test-and-code-cov:
    executor: jdk17
    steps:
      - checkout
      - run: mkdir test-reports
      - restore_cache:
          keys:
            - v2-mvn-full-{{ .Branch }}
            - v2-mvn-full-
      - run: mvn dependency:go-offline
      - save_cache:
          key: v2-mvn-full-{{ .Branch }}
          paths:
            - ~/.m2
      - run:
          environment:
            PARAM_IT_PATTERN: '**/*IT*.java'
            PARAM_TEST_DIR: 'src/**/src/test/java'
            PARAM_TEST_PATTERN: '**/*Test*.java'
          name: Parellel and Selected Tests
          command: |
            echo -e "\033[31m\033[4mNotes on Test Splitting & Re-running failed tests only \033[0m
                    \033[34mCaveat 1:\033[0m  CircleCI Test Splitting uses filename by default, but JUnit reports use class names.
                    Therefore this uses naive translation of linux file paths to dot separated package names and strips the .java suffix.
                    \033[34mCaveat 2:\033[0m  Because we "skip" tests on re-runs, Maven will fail by default without `-DfailIfNoTests=false`
                    \033[34mDebugging:\033[0m This will place all files used to decide tests in .circleci/tests and export it as an artifact for inspection/debugging.
                    "
            mkdir -p .circleci/tests/
            #convert file names to classnames
            circleci tests glob 'src/**/src/test/java/**/*Test*.java' | \
                sed -e 's#^src/[a-z]*/src/test/java/\(.*\).java#\1#' | \
                tr "/" "." > .circleci/tests/surefire_classnames
            #pass classnames to CircleCI CLI as test wrapper
            cat .circleci/tests/surefire_classnames | circleci tests run --command 'tr " " "," | xargs -I {} ./mvnw -B  -DfailIfNoTests=false -Dtest={} test' --verbose --split-by=timings  
      - run: 
          name: aggregate all module tests
          when: always
          command: |
            for SERVICE in "balancereader" "ledgerwriter" "transactionhistory"; do
            echo "checking $SERVICE..."
            # save current working dir to memory and cd to src/$SERVICE
            cp src/$SERVICE/target/surefire-reports/*.xml test-reports || echo "No tests for this node"
            # return to previously saved path
            done
      - store_test_results:
          path: test-reports
      - store_artifacts:
          path: test-reports
      - store_artifacts:
          path: .circleci/tests/
   
workflows:
  cleanup-on-merge-pr:
    jobs:
      - java-checkstyle:
          context: [ compass-integration-bank-of-aion ]
      - java-test-and-code-cov
      - python-checkstyle
      - python-test
      - python-test-parallel