version: 2.1
orbs:
  compass: atlassian-labs/compass@0.1.2
  maven: circleci/maven@1.4
  snyk: snyk/snyk@1.4.0
          
executors:
  with-chrome:
    docker:
      - image: 'cypress/browsers:node-20.6.1-chrome-116.0.5845.187-1-ff-117.0-edge-116.0.1938.76-1'

  for-snyk:
    docker:
      - image: fgribreau/jq.node

  base:
    docker:
      - image: cimg/deploy:2022.08

  jdk17:
    docker:
      - image: cimg/openjdk:17.0.3
    resource_class: xlarge

  python39:
    docker:
      - image: cimg/python:3.9


jobs:
  python-checkstyle:
    executor: python39
    steps:
      - checkout
      - run: pip install pylint
      - run:
          name: Lint Python
          command: pylint --rcfile=./.pylintrc ./src/*/*.py

  python-test:
    executor: python39
    steps:
      - checkout
      - run: mkdir test-reports
      - run:
          name: Test Python Services
          command: |
            for SERVICE in "contacts" "userservice"; do
              echo "testing $SERVICE..."
              # save current working dir to memory and cd to src/$SERVICE
              pushd src/$SERVICE
                python3 -m venv $HOME/venv-$SERVICE
                source $HOME/venv-$SERVICE/bin/activate
                pip install --upgrade pip
                pip install -r requirements.txt
                #CLI wraps test runner to allow "rerun failed tests only"
                TEST_FILES=$(circleci tests glob "tests/test_*.py")
                echo $TEST_FILES | circleci tests run --command="xargs python -m pytest -o junit_family=legacy --junit-xml=../../test-reports/report-${SERVICE}.xml -v -p no:warnings" --verbose --split-by=timings
                deactivate
              # return to previously saved path
              popd
            done
      - store_test_results:
          path: test-reports
      - store_artifacts:
          path: test-reports

  python-test-parallel:
    executor: python39
    parallelism: 4
    steps:
      - checkout
      - run: mkdir test-reports
      - run:
          name: Test Python Services by timings
          command: |
            # Create a file containing all test paths for splitting
            > all_test_files.txt
            
            for MOD in "contacts" "userservice"; do
              # First discover test files from within each module directory
              pushd src/$MOD >/dev/null
              # List all test files in the 'tests' directory
              TEST_FILES=$(find tests -name "test_*.py" 2>/dev/null || echo "")
              if [ -n "$TEST_FILES" ]; then
                # Mark each test with its module for processing later
                echo "$TEST_FILES" | sed "s|^|$MOD:|" >> ../../all_test_files.txt
              fi
              popd >/dev/null
            done
            
            # Split test files based on timing data
            MY_TEST_FILES=$(cat all_test_files.txt | circleci tests split --split-by=timings)
            echo "My test files: $MY_TEST_FILES"
            
            # Run the assigned test files
            for TEST_FILE_PATH in $MY_TEST_FILES; do
              # Extract module and file path
              MOD=$(echo $TEST_FILE_PATH | cut -d':' -f1)
              FILE=$(echo $TEST_FILE_PATH | cut -d':' -f2)
              
              echo "Running test file $FILE in module $MOD"
              pushd src/$MOD >/dev/null
              
              # Create virtual environment if needed
              if [ ! -d "$HOME/venv-$MOD" ]; then
                python3 -m venv $HOME/venv-$MOD
                source $HOME/venv-$MOD/bin/activate
                pip install --upgrade pip
                pip install -r requirements.txt
              else
                source $HOME/venv-$MOD/bin/activate
              fi
              
              # Extract a safe filename for the test report
              SAFE_FILE_NAME=$(echo $FILE | tr '/' '_')
              
              # Run the specific test file
              python -m pytest $FILE -v -p no:warnings --junit-xml=../../test-reports/report-${MOD}-${SAFE_FILE_NAME}-${CIRCLE_NODE_INDEX}.xml
              
              deactivate
              popd >/dev/null
            done
      - store_test_results:
          path: test-reports
      - store_artifacts:
          path: test-reports
  snyk-scan-image:
    executor: for-snyk
    parameters:
      service:
        type: string
        description: "Service name to scan (e.g., frontend, ledgerwriter)"
      region:
        type: string
        description: where we are deploying, a CERA cluster region
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - attach_workspace:
          at: output  # Just use one region's output
      #- run:
      #    name: Add npm global bin to PATH
      #    command: echo 'export PATH="$(npm bin -g):$PATH"' >> $BASH_ENV && source $BASH_ENV
      - jq/install
      - run:
          name: Find image tag for service
          command: |
            # Extract the full image tag for this service (from just one region)
            jq -r '.builds[].tag' output/tags.json | grep "<<parameters.service>>" > image_tag.txt
            IMAGE=$(cat image_tag.txt)
            echo "Will scan image: $IMAGE"
            echo "export IMAGE=\"$IMAGE\"" >> $BASH_ENV
      - run:
          name: Create directory for Snyk reports
          command: mkdir -p /tmp/snyk-reports
      - snyk/scan:
          docker-image-name: ${IMAGE}
          severity-threshold: high
          fail-on-issues: false
          monitor-on-build: false
          project: ${CIRCLE_PROJECT_REPONAME}/<<parameters.service>>
          additional-arguments: --json-file-output=/tmp/snyk-reports/<<parameters.service>>-report.json
      - run:
          name: Install snyk-to-html and convert reports
          command: |
            npm install -g snyk-to-html
            for report in /tmp/snyk-reports/*-report.json; do
              base_name=$(basename "$report" .json)
              snyk-to-html -i "$report" -o "/tmp/snyk-reports/${base_name}.html"
            done
      - store_artifacts:
          path: /tmp/snyk-reports
          destination: snyk-reports



  java-checkstyle:
    executor: jdk17
    steps:
      - checkout
      - maven/with_cache:  
          verify_dependencies: false       
          steps: 
          - run: ./mvnw checkstyle:check


  java-test-and-code-cov:
    executor: jdk17
    steps:
      - checkout
      - run: mkdir test-reports
      - restore_cache:
          keys:
            - v2-mvn-full-{{ .Branch }}
            - v2-mvn-full-
      - run: mvn dependency:go-offline
      - save_cache:
          key: v2-mvn-full-{{ .Branch }}
          paths:
            - ~/.m2
      - run:
          environment:
            PARAM_IT_PATTERN: '**/*IT*.java'
            PARAM_TEST_DIR: 'src/**/src/test/java'
            PARAM_TEST_PATTERN: '**/*Test*.java'
          name: Parellel and Selected Tests
          command: |
            echo -e "\033[31m\033[4mNotes on Test Splitting & Re-running failed tests only \033[0m
                    \033[34mCaveat 1:\033[0m  CircleCI Test Splitting uses filename by default, but JUnit reports use class names.
                    Therefore this uses naive translation of linux file paths to dot separated package names and strips the .java suffix.
                    \033[34mCaveat 2:\033[0m  Because we "skip" tests on re-runs, Maven will fail by default without `-DfailIfNoTests=false`
                    \033[34mDebugging:\033[0m This will place all files used to decide tests in .circleci/tests and export it as an artifact for inspection/debugging.
                    "
            mkdir -p .circleci/tests/
            #convert file names to classnames
            circleci tests glob 'src/**/src/test/java/**/*Test*.java' | \
                sed -e 's#^src/[a-z]*/src/test/java/\(.*\).java#\1#' | \
                tr "/" "." > .circleci/tests/surefire_classnames
            #pass classnames to CircleCI CLI as test wrapper
            cat .circleci/tests/surefire_classnames | circleci tests run --command 'tr " " "," | xargs -I {} ./mvnw -B  -DfailIfNoTests=false -Dtest={} test' --verbose --split-by=timings  
      - run: 
          name: aggregate all module tests
          when: always
          command: |
            for SERVICE in "balancereader" "ledgerwriter" "transactionhistory"; do
            echo "checking $SERVICE..."
            # save current working dir to memory and cd to src/$SERVICE
            cp src/$SERVICE/target/surefire-reports/*.xml test-reports || echo "No tests for this node"
            # return to previously saved path
            done
      - store_test_results:
          path: test-reports
      - store_artifacts:
          path: test-reports
      - store_artifacts:
          path: .circleci/tests/




  skaffold-build-push:
    parameters:
      app-environment:
        type: string
        default: dev
        description: Environment suffix used by namesapce and SA account name.
      region:
        type: string
        description: where we are deploying, a CERA cluster region
    executor: jdk17
    environment:
      APP_ENV: dev
    steps:
      - checkout
      - run: |
          curl -Lo skaffold https://storage.googleapis.com/skaffold/releases/latest/skaffold-linux-amd64 && \
          sudo install skaffold /usr/local/bin/
      - load-credentials:
          region: <<parameters.region>>
      - setup_remote_docker:
          docker_layer_caching: true
      - restore_cache:
          keys:
            - v2-mvn-full-{{ .Branch }}
            - v2-mvn-full-
      - restore_cache:
          keys:
            - v1-skaffold-{{ .Branch }}
            - v1-skaffold-
      - run: |
          echo "${DOCKER_PWD}" | docker login --username ${DOCKER_LOGIN} --password-stdin docker.nexus.<<parameters.region>>.circleci-fieldeng.com
          # seems like skaffold jib needs a eird kick, hit me locally, passes on second run
          ./mvnw jib:_skaffold-fail-if-jib-out-of-date -Djib.requiredVersion=3.2.1 --projects src/ledgerwriter --also-make jib:_skaffold-files-v2 --quiet --batch-mode
          echo "Jib ready"
          mkdir output
          skaffold build --build-concurrency=4 --default-repo=docker.nexus.<<parameters.region>>.circleci-fieldeng.com --file-output=output/tags.json
          ls /tmp/
      - save_cache:
          key: v1-skaffold-{{ .Branch }}
          paths:
            - ~/.skaffold/cache
      - persist_to_workspace:
          root: output
          paths: [ 'tags.json' ]
 

  deploy:
    executor: base
    parameters:
      app-environment:
        type: string
        default: dev
        description: Environment suffix used by namesapce and SA account name.
      region:
        type: string
        description: where we are deploying, a CERA cluster region
    environment:
      APP_ENV: <<parameters.app-environment>>
      CERA_REGION: <<parameters.region>>
    steps:
      - checkout
      - load-credentials:
          region: <<parameters.region>>
      # all k8s info (cluster, ns, etc) came from vault.
      - run: echo "Now using ${K8S_USER}@${K8S_NAMESPACE}"
      - run: |
          sudo apt update && sudo apt install kubectl -y
          echo ${K8S_CERT} | base64 -d > ca.crt
          kubectl config set-cluster ${K8S_CLUSTER} --server=${K8S_URL} --certificate-authority=ca.crt
          export DECODED_TOKEN=$(echo ${K8S_TOKEN} | base64 -d) #kubectl prints an encoded value, MUST decode it to work.
          kubectl config set-credentials ${K8S_USER} --token=${DECODED_TOKEN}
          kubectl config set-context default --user=${K8S_USER}  --cluster=${K8S_CLUSTER} --namespace ${K8S_NAMESPACE}
          kubectl config use-context default
          kubectl get serviceaccounts -n ${K8S_NAMESPACE}
      - attach_workspace:
          at: output
      - run: 
          name: Deploy CCI Bank Corp Services
          command: |
            curl -Lo skaffold https://storage.googleapis.com/skaffold/releases/latest/skaffold-linux-amd64 && \
            sudo install skaffold /usr/local/bin/
            export APP_VERSION="0.1.<<pipeline.number>>"
            export CIRCLE_PIPELINE_ID=<<pipeline.id>>
            #only kuztomizing frontend for D&R demo
            cat .circleci/release_tracking/kustomization.yaml | circleci env subst > dev-kubernetes-manifests/kustomization.yaml
            cat .circleci/release_tracking/template_patch.yaml | circleci env subst > dev-kubernetes-manifests/template_patch.yaml
            cat .circleci/release_tracking/virtual_service_${APP_ENV}.yaml | circleci env subst > dev-kubernetes-manifests/virtual_service.yaml
            kubectl kustomize dev-kubernetes-manifests > dev-kubernetes-manifests/frontend-annotated.yaml
            skaffold deploy --default-repo=docker.nexus.<<parameters.region>>.circleci-fieldeng.com --namespace=${K8S_NAMESPACE} --build-artifacts=output/tags.json
      - run:
          name: Wait for deployment
          command: |
            kubectl wait rollout -n ${K8S_NAMESPACE} frontend-rollout --for condition=Available=True --timeout=90s
      - run: 
          name: Print Frontend URL
          command: kubectl get service frontend -n ${K8S_NAMESPACE} | awk '{print $4}'
  e2e:
    executor: with-chrome
    parameters:
      app-environment:
        type: string
        default: dev
        description: Environment suffix used by namesapce and SA account name.
      region:
        type: string
        description: where we are deploying, a CERA cluster region
    steps:
      - checkout
      - run: 
          name: Run Cypress Tests
          command: |
            URL="https://<<parameters.region>>.circleci-fieldeng.com"
            if [ "<<parameters.app-environment>>" != "prod" ]; then
              URL="https://<<parameters.app-environment>>.<<parameters.region>>.circleci-fieldeng.com"
            fi
            echo "Testing against ${URL}"
            cd ui-tests
            npx cypress run \
            --config baseUrl=${URL} \
            --browser firefox \
            --reporter junit \
            --reporter-options "mochaFile=results/my-test-output-[hash].xml"
      - store_test_results:
          path: ui-tests/results
      - store_artifacts:
          path: ui-tests/cypress/videos
      - store_artifacts:
          path: ui-tests/cypress/screenshots    

commands:
  load-credentials:
    parameters:
      region:
        type: string
        description: where we are deploying, a CERA cluster region
    steps:
      - run:
          name: install vault agent (if not present)
          command: |
            vault -h && exit 0 || echo "Installing vault"
            #only runs if vault command avbove failed
            cd /tmp
            wget https://releases.hashicorp.com/vault/1.12.2/vault_1.12.2_linux_amd64.zip
            unzip vault_1.12.2_linux_amd64.zip
            sudo mv vault /usr/local/bin        
            vault -h    
      - run:
          name: Load Credentials from Vault
          command: |
            echo "Environment (APP_ENV ): $APP_ENV"
            export VAULT_ADDR="https://vault.<<parameters.region>>.circleci-fieldeng.com"
            export VAULT_ROLE=cba-${APP_ENV}-deploy
            echo $VAULT_ROLE
            echo $CIRCLE_OIDC_TOKEN > .circleci/vault/token.json
            circleci env subst < .circleci/vault/agent.hcl.tpl > .circleci/vault/agent.hcl
            cat .circleci/vault/agent.hcl
            vault agent -config=.circleci/vault/agent.hcl
      - run:
          command: |
            source .circleci/vault/setenv
            #export for other steps
          name: Set Environment Variables from Vault

workflows:
  all-commits:
    jobs:
      - java-checkstyle:
          context: [ compass-integration-bank-of-aion ]
      - java-test-and-code-cov
      - python-checkstyle
      - python-test
      - python-test-parallel
      - skaffold-build-push:
          matrix:
            parameters:
              region: [emea, namer]
          context: cera-vault-oidc
          region: <<matrix.region>>
          name: Skaffold build & Push [<<matrix.region>>]
          post-steps:
            - persist_to_workspace:
                root: output
                paths: ['tags.json']
                name: output-<<matrix.region>>  # Named workspace
      - snyk-scan-image:
          matrix:
            parameters:
              region: [emea,namer]
              service: 
                - balancereader
                - ledgerwriter
                - transactionhistory
                - contacts
                - userservice
                - frontend
          name: Scan <<matrix.service>> [<<matrix.region>>] 
          region: <<matrix.region>>
          requires: ['Skaffold build & Push [<<matrix.region>>]']  # Only depend on one region's build
      
      - deploy:
          matrix:
            parameters:
              region: [emea, namer]
          name: Deploy Dev [<<matrix.region>>]
          region: <<matrix.region>>
          requires:
            - Scan balancereader [<<matrix.region>>]
            - Scan ledgerwriter [<<matrix.region>>]
            - Scan transactionhistory [<<matrix.region>>]
            - Scan contacts [<<matrix.region>>]
            - Scan userservice [<<matrix.region>>]
            - Scan frontend [<<matrix.region>>]
            - python-test
            - java-test-and-code-cov
          context: [compass-integration-bank-of-aion, cera-vault-oidc]
          post-steps:
            - compass/notify_deployment:
                token_name: COMPASS_CCI_TOKEN
                environment_type: development
      - e2e:
          matrix:
            parameters:
              region: [emea,namer]
          name: e2e [<<matrix.region>>]
          requires: [ 'Deploy Dev [<<matrix.region>>]' ]
          region: <<matrix.region>>
      - deploy:
          matrix:
            parameters:
              region: [emea,namer]
          name: Deploy Production [<<matrix.region>>]
          requires: 
            - 'e2e [<<matrix.region>>]'
          app-environment: prod
          region: <<matrix.region>>
          context: [ compass-integration-bank-of-aion, cera-vault-oidc-prod ]
          filters:
            branches:
              only: [ main ]
          post-steps:
            - compass/notify_deployment:
                token_name: COMPASS_CCI_TOKEN
                environment_type: production
                environment: CERA-Cluster-namer-Prod
