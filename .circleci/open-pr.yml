version: 2.1

orbs:
  maven: circleci/maven@1.4

executors:
  # Optimized for CPU-intensive Java builds
  jdk17-large:
    docker:
      - image: cimg/openjdk:17.0.7
    resource_class: xlarge

  # Optimized for linting and simple tasks
  jdk17-medium:
    docker:
      - image: cimg/openjdk:17.0.7
    resource_class: large

  # Optimized Python executor with pre-installed tools
  python38:
    docker:
      - image: cimg/python:3.8
    resource_class: medium

jobs:
  # Fast linting jobs to fail fast
  python-checkstyle:
    executor: python38
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-pylint-{{ checksum "requirements.txt" }}
            - v1-pylint-
      - run:
          name: Install pylint
          command: |
            pip install --user pylint
      - save_cache:
          key: v1-pylint-{{ checksum "requirements.txt" }}
          paths:
            - ~/.local
      - run:
          name: Lint Python
          command: ~/.local/bin/pylint --rcfile=./.pylintrc ./src/*/*.py

  java-checkstyle:
    executor: jdk17-medium
    steps:
      - checkout
      - restore_cache:
          keys:
            - v3-mvn-checkstyle-{{ checksum "pom.xml" }}
            - v3-mvn-checkstyle-
      - run: ./mvnw dependency:go-offline -q
      - save_cache:
          key: v3-mvn-checkstyle-{{ checksum "pom.xml" }}
          paths:
            - ~/.m2
      - run:
          name: Run Checkstyle
          command: ./mvnw checkstyle:check -q

  # Optimized Python tests with parallel execution and caching
  python-test:
    executor: python38
    parallelism: 2
    steps:
      - checkout
      - run: mkdir -p test-reports
      - restore_cache:
          keys:
            - v2-python-deps-{{ .Branch }}-{{ checksum "src/contacts/requirements.txt" }}-{{ checksum "src/userservice/requirements.txt" }}
            - v2-python-deps-{{ .Branch }}-
            - v2-python-deps-
      - run:
          name: Test Python Services in Parallel
          command: |
            MODULES=("contacts" "userservice")
            MY_MODULES=$(printf '%s\n' "${MODULES[@]}" | circleci tests split)
            echo "Running modules: ${MY_MODULES[@]}"
            
            for MOD in ${MY_MODULES[@]}; do
                echo "Testing $MOD..."
                cd src/$MOD
                
                # Create and activate virtual environment
                python3 -m venv venv-$MOD
                source venv-$MOD/bin/activate
                
                # Install dependencies with caching
                pip install --upgrade pip
                pip install -r requirements.txt
                
                # Run tests with CircleCI test splitting
                python -m pytest tests \
                  --junit-xml=../../test-reports/report-${MOD}.xml \
                  -v -p no:warnings \
                  --maxfail=1
                
                deactivate
                cd ../..
            done
      - save_cache:
          key: v2-python-deps-{{ .Branch }}-{{ checksum "src/contacts/requirements.txt" }}-{{ checksum "src/userservice/requirements.txt" }}
          paths:
            - src/contacts/venv-contacts
            - src/userservice/venv-userservice
      - store_test_results:
          path: test-reports
      - store_artifacts:
          path: test-reports

  # Optimized Java tests with better parallelism
  java-test:
    executor: jdk17-large
    parallelism: 3
    steps:
      - checkout
      - run: mkdir -p test-reports
      - restore_cache:
          keys:
            - v3-mvn-deps-{{ .Branch }}-{{ checksum "pom.xml" }}
            - v3-mvn-deps-{{ .Branch }}-
            - v3-mvn-deps-
      - run:
          name: Download Dependencies
          command: |
            ./mvnw dependency:go-offline -B -q
            ./mvnw dependency:resolve-sources -B -q
      - save_cache:
          key: v3-mvn-deps-{{ .Branch }}-{{ checksum "pom.xml" }}
          paths:
            - ~/.m2
      - run:
          name: Run Java Tests in Parallel
          command: |
            # Create test list for splitting
            mkdir -p .circleci/tests/
            
            # Find all test classes
            find src -name "*Test.java" -o -name "*IT.java" | \
                sed -e 's#^src/[^/]*/src/test/java/\(.*\)\.java#\1#' | \
                tr "/" "." > .circleci/tests/all_tests
            
            # Split tests across parallel containers
            TESTS=$(cat .circleci/tests/all_tests | circleci tests split --split-by=timings)
            
            if [ -n "$TESTS" ]; then
                echo "Running tests: $TESTS"
                TESTS_COMMA=$(echo $TESTS | tr ' ' ',')
                ./mvnw test -B \
                  -Dtest="$TESTS_COMMA" \
                  -DfailIfNoTests=false \
                  -Dmaven.test.failure.ignore=false \
                  -T 2C
            else
                echo "No tests assigned to this container"
            fi
      - run:
          name: Aggregate Test Results
          when: always
          command: |
            find . -name "surefire-reports" -type d | while read dir; do
                cp "$dir"/*.xml test-reports/ 2>/dev/null || true
            done
      - store_test_results:
          path: test-reports
      - store_artifacts:
          path: test-reports
      - store_artifacts:
          path: .circleci/tests/

workflows:
  version: 2
  build-and-test:
    jobs:
      # Fast linting jobs run first for quick feedback
      - python-checkstyle
      - java-checkstyle
      
      # Test jobs run in parallel after linting passes
      - python-test:
          requires:
            - python-checkstyle
      - java-test:
          requires:
            - java-checkstyle
          context: [ compass-integration-bank-of-aion ]